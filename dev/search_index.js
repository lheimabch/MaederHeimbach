var documenterSearchIndex = {"docs":
[{"location":"wave3DnonlinearChi3.html#Nonlinear-Chi3-Wave-3D","page":"Nonlinear Chi3 Wave 3D","title":"Nonlinear Chi3 Wave 3D","text":"","category":"section"},{"location":"wave3DnonlinearChi3.html","page":"Nonlinear Chi3 Wave 3D","title":"Nonlinear Chi3 Wave 3D","text":"Depth = 1","category":"page"},{"location":"wave3DnonlinearChi3.html","page":"Nonlinear Chi3 Wave 3D","title":"Nonlinear Chi3 Wave 3D","text":"MaxwellWave.Wave3DnonlinearChi3.update_vecv_chi3!\nMaxwellWave.Wave3DnonlinearChi3.compute_alpha!","category":"page"},{"location":"wave3DnonlinearChi3.html#MaxwellWave.Wave3DnonlinearChi3.update_vecv_chi3!","page":"Nonlinear Chi3 Wave 3D","title":"MaxwellWave.Wave3DnonlinearChi3.update_vecv_chi3!","text":"@parallel_indices (ix, iy, iz) function update_vecv_chi3!(ux, uy, uz, vx, vy, vz, dt, _dx, _dy, _dz, _dx_2, _dy_2, _dz_2, alpha, delta, omega)\n\nComputes the update rule for the velocity of the vector field through the equation:\n\nvecv^j+frac12 = vecv^j-frac12 + dt*alphaleft(vecrright) nabla left(delta left(vecrright) nabla cdot left( omega left(vecrright) leftlvert vecu^j rightrvert^2 vecu^j right) right)\n\nand discretized in the following way:\n\nv_x^j+frac12leftixiyizright = v_x^j-frac12leftixiyizright + dt*alphaleftixiyizright left( \ndelta leftix+1iyizright left( left(omega leftix+1iyizright leftlvert vecu^jleftix+1iyizright rightrvert^2 u_x^j leftix+1iyizright  \n - omega leftixiyizright leftlvert vecu^jleftixiyizright rightrvert^2 u_x^jleftixiyizrightright)dx + left(omega leftix+1iy+1izright \n leftlvert vecu^jleftix+1iy+1izright rightrvert^2 u_y^jleftix+1iy+1izright  \n - omega leftix+1iy-1izright leftlvert vecu^jleftix+1iy-1izright rightrvert^2 u_y^jleftix+1iy-1izrightright)dy2+ left(omega leftix+1iyiz+1right leftlvert vecu^jleftix+1iyiz+1right rightrvert^2 u_z^jleftix+1iyiz+1right- omega leftix+1iyiz-1right leftlvert vecu^jleftix+1iyiz-1right rightrvert^2 u_z^jleftix+1iyiz-1rightright)dz2right) + delta leftix-1iyizright left( left(omega leftixiyizright leftlvert vecu^jleftixiyizright rightrvert^2 u_x^jleftixiyizright \n - omega leftix-1iyizright leftlvert vecu^jleftix-1iyizright rightrvert^2 u_x^jleftix-1iyizrightright)dx \n+ left(omega leftix-1iy+1izright leftlvert vecu^jleftix-1iy+1izright rightrvert^2 u_y^jleftix-1iy+1izright  \n - omega leftix-1iy-1izright leftlvert vecu^jleftix-1iy-1izright rightrvert^2 u_y^jleftix-1iy-1izrightright)dy2 + left(omega leftix-1iyiz+1right leftlvert vecu^jleftix-1iyiz+1right rightrvert^2 u_z^jleftix-1iyiz+1right- omega leftix-1iyiz-1right leftlvert vecu^jleftix-1iyiz-1right rightrvert^2 u_z^jleftix-1iyiz-1rightright)dz2right) right)dx2\n\nv_y^j+frac12leftixiyizright = v_y^j-frac12leftixiyizright + dt*alphaleftixiyizright left( \ndelta leftixiy+1izright left( left(omega leftix+1iy+1izright leftlvert vecu^jleftix+1iy+1izright rightrvert^2 u_x^j leftix+1iy+1izright  \n - omega leftix-1iy+1izright leftlvert vecu^jleftix-1iy+1izright rightrvert^2 u_x^jleftix-1iy+1izrightright)dx2 + left(omega leftixiy+1izright \n leftlvert vecu^jleftixiy+1izright rightrvert^2 u_y^jleftixiy+1izright  \n - omega leftixiyizright leftlvert vecu^jleftixiyizright rightrvert^2 u_y^jleftixiyizrightright)dy+ \n left(omega leftixiy+1iz+1right leftlvert vecu^jleftixiy+1iz+1right rightrvert^2 u_z^jleftixiy+1iz+1right- omega leftixiy+1iz-1right leftlvert vecu^jleftixiy+1iz-1right rightrvert^2 u_z^jleftixiy+1iz-1rightright)dz2right) + delta leftixiy-1izright left( left(omega leftix+1iy-1izright leftlvert vecu^jleftix+1iy-1izright rightrvert^2 u_x^jleftix+1iy-1izright \n - omega leftix-1iy-1izright leftlvert vecu^jleftix-1iy-1izright rightrvert^2 u_x^jleftix-1iy-1izrightright)dx2 \n+ left(omega leftixiyizright leftlvert vecu^jleftixiyizright rightrvert^2 u_y^jleftixiyizright  \n - omega leftixiy-1izright leftlvert vecu^jleftixiy-1izright rightrvert^2 u_y^jleftixiy-1izrightright)dy + left(omega leftixiy-1iz+1right leftlvert vecu^jleftixiy-1iz+1right rightrvert^2 u_z^jleftixiy-1iz+1right- omega leftixiy-1iz-1right leftlvert vecu^jleftixiy-1iz-1right rightrvert^2 u_z^jleftixiy-1iz-1rightright)dz2right) right)dy2\n\nv_z^j+frac12leftixiyizright = v_z^j-frac12leftixiyizright + dt*alphaleftixiyizright left( \ndelta leftixiyiz+1right left( left(omega leftix+1iyiz+1right leftlvert vecu^jleftix+1iyiz+1right rightrvert^2 u_x^j leftix+1iyiz+1right  \n - omega leftix-1iyiz+1right leftlvert vecu^jleftix-1iyiz+1right rightrvert^2 u_x^jleftix-1iyiz+1rightright)dx2 + left(omega leftixiy+1iz+1right \n leftlvert vecu^jleftixiy+1iz+1right rightrvert^2 u_y^jleftixiy+1iz+1right  \n - omega leftixiy-1iz+1right leftlvert vecu^jleftixiy-1iz+1right rightrvert^2 u_y^jleftixiy-1iz+1rightright)dy2+ \n left(omega leftixiyiz+1right leftlvert vecu^jleftixiyiz+1right rightrvert^2 u_z^jleftixiyiz+1right- \n omega leftixiyizright leftlvert vecu^jleftixiyizright rightrvert^2 u_z^jleftixiyizrightright)dzright) +\n delta leftixiyiz-1right left( left(omega leftix+1iyiz-1right leftlvert vecu^jleftix+1iyiz-1right rightrvert^2 u_x^jleftix+1iyiz-1right \n - omega leftix-1iyiz-1right leftlvert vecu^jleftix-1iyiz-1right rightrvert^2 u_x^jleftix-1iyiz-1rightright)dx2 \n+ left(omega leftixiy+1iz-1right leftlvert vecu^jleftixiy+1iz-1right rightrvert^2 u_y^jleftixiy+1iz-1right  \n - omega leftixiy-1iz-1right leftlvert vecu^jleftixiy-1iz-1right rightrvert^2 u_y^jleftixiy-1iz-1rightright)dy2 + left(omega leftixiyizright leftlvert vecu^jleftixiyizright rightrvert^2 u_z^jleftixiyizright- omega \n leftixiyiz-1right leftlvert vecu^jleftixiyiz-1right rightrvert^2 u_z^jleftixiyiz-1rightright)dzright) right)dz2\n\nWhere we have applied a central difference formula for the outer derivative. For the inner derivates, we use the central or forward/backward formula depending on if the derivative is in the same direction as the outer derivative. We use the forward/backward formula to arrive at a local nearest neighbor stencil.\n\n\n\n\n\n","category":"function"},{"location":"wave3DnonlinearChi3.html#MaxwellWave.Wave3DnonlinearChi3.compute_alpha!","page":"Nonlinear Chi3 Wave 3D","title":"MaxwellWave.Wave3DnonlinearChi3.compute_alpha!","text":"@parallel_indices (ix, iy, iz) function compute_alpha!(alpha, ux, uy, uz, _mu0, _epsilon0, chi3, epsilon)\n\nComputes the new coefficient alpha in every step:\n\nalpha = frac1mu_0 varepsilon_0 varepsilon_rleft(vecrright) + mu_0varepsilon_0 chi^3left(vecrright) leftlvert vecEleft(vecrtright)rightrvert^2\n\n\n\n\n\n","category":"function"},{"location":"wave3DnonlinearChi3.html","page":"Nonlinear Chi3 Wave 3D","title":"Nonlinear Chi3 Wave 3D","text":"","category":"page"},{"location":"wave2D.html#Wave-2D","page":"Wave 2D","title":"Wave 2D","text":"","category":"section"},{"location":"wave2D.html","page":"Wave 2D","title":"Wave 2D","text":"Depth = 1","category":"page"},{"location":"wave2D.html","page":"Wave 2D","title":"Wave 2D","text":"MaxwellWave.Wave2D.update_u!\nMaxwellWave.Wave2D.update_v_nabla2!","category":"page"},{"location":"wave2D.html#MaxwellWave.Wave2D.update_u!","page":"Wave 2D","title":"MaxwellWave.Wave2D.update_u!","text":"@parallel_indices (ix,iy) function update_u(u,v,dt)\n\nComputes the update rule for the scalar field through the equation:\n\nu^j+1 = u^j + dt*v^j+frac12\n\nImportant to call the kernel with size(u)-2\n\n\n\n\n\n","category":"function"},{"location":"wave2D.html#MaxwellWave.Wave2D.update_v_nabla2!","page":"Wave 2D","title":"MaxwellWave.Wave2D.update_v_nabla2!","text":"@parallel_indices (ix,iy) function update_v!(u,v,dt,_dx,_dy,c2)\n\nComputes the update rule for the velocity of the scalar field through the equation:\n\nv^j+frac12 = v^j-frac12 + dt*c^2 nabla^2 u^j\n\n\n\n\n\n","category":"function"},{"location":"wave2D.html","page":"Wave 2D","title":"Wave 2D","text":"","category":"page"},{"location":"auxiliary.html#Auxiliary","page":"Auxiliary","title":"Auxiliary","text":"","category":"section"},{"location":"auxiliary.html","page":"Auxiliary","title":"Auxiliary","text":"Depth = 1","category":"page"},{"location":"auxiliary.html","page":"Auxiliary","title":"Auxiliary","text":"MaxwellWave.Auxiliary.save_array\nMaxwellWave.Auxiliary.load_array","category":"page"},{"location":"auxiliary.html#MaxwellWave.Auxiliary.save_array","page":"Auxiliary","title":"MaxwellWave.Auxiliary.save_array","text":"save_array(Aname,A)\n\nSaves the array A in a binary file with name Aname.\n\nfname = string(Aname,\".bin\")\nout = open(fname,\"w\"); write(out,A); close(out)\n\n\n\n\n\n","category":"function"},{"location":"auxiliary.html#MaxwellWave.Auxiliary.load_array","page":"Auxiliary","title":"MaxwellWave.Auxiliary.load_array","text":"load_array(Aname,A)\n\nLoades the array A from a binary file with name Aname.\n\nfname = string(Aname,\".bin\")\nfid=open(fname,\"r\"); read!(fid,A); close(fid)\n\n\n\n\n\n","category":"function"},{"location":"auxiliary.html","page":"Auxiliary","title":"Auxiliary","text":"","category":"page"},{"location":"wave3D.html#Wave-3D","page":"Wave 3D","title":"Wave 3D","text":"","category":"section"},{"location":"wave3D.html","page":"Wave 3D","title":"Wave 3D","text":"Depth = 1","category":"page"},{"location":"wave3D.html","page":"Wave 3D","title":"Wave 3D","text":"MaxwellWave.Wave3D.update_vecu!\nMaxwellWave.Wave3D.update_vecv_nabla2!\nMaxwellWave.Wave3D.update_vecv_sigma!\nMaxwellWave.Wave3D.update_vecv_varepsilon!\nMaxwellWave.Wave3D.update_vecu_abs_yz_left!\nMaxwellWave.Wave3D.compute_vecv_abs_yz_left!\nMaxwellWave.Wave3D.compute_vecv_abs_yz_right!\nMaxwellWave.Wave3D.compute_vecv_abs_xz_left!\nMaxwellWave.Wave3D.compute_vecv_abs_xz_right!\nMaxwellWave.Wave3D.compute_vecv_abs_xy_left!\nMaxwellWave.Wave3D.compute_vecv_abs_xy_right!\nMaxwellWave.Wave3D.update_vecu_abs!","category":"page"},{"location":"wave3D.html#MaxwellWave.Wave3D.update_vecu!","page":"Wave 3D","title":"MaxwellWave.Wave3D.update_vecu!","text":"@parallel_indices (ix, iy, iz) function update_vecu!(ux, uy, uz, vx, vy, vz, dt)\n\nComputes the update rule for the vector field through the equation:\n\nvecu^j+1 = vecu^j + dt*vecv^j+frac12\n\nImportant to call the kernel with size(u)-2\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.update_vecv_nabla2!","page":"Wave 3D","title":"MaxwellWave.Wave3D.update_vecv_nabla2!","text":"@parallel_indices (ix, iy, iz) function update_vecv_nabla2!(ux, uy, uz, vx, vy, vz, dt, _dx2, _dy2, _dz2, alpha)\n\nComputes the update rule for the velocity of the vector field through the equation:\n\nvecv^j+frac12 = vecv^j-frac12 + dt*alphaleft(vecrright) nabla^2 vecu^j\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.update_vecv_sigma!","page":"Wave 3D","title":"MaxwellWave.Wave3D.update_vecv_sigma!","text":"@parallel_indices (ix, iy, iz) function update_vecv_sigma!(ux, uy, uz, vx, vy, vz, dt, beta, gamma)\n\nComputes the update rule for the velocity of the vector field through the equation:\n\nvecv^j+frac12 = vecv^j-frac12 + dt*betaleft(vecrright) vecu^j + dt*gammaleft(vecrright) vecv^j-frac12\n\nImportant to call the kernel with size(u)-2\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.update_vecv_varepsilon!","page":"Wave 3D","title":"MaxwellWave.Wave3D.update_vecv_varepsilon!","text":"@parallel_indices (ix, iy, iz) function update_vecv_varepsilon!(ux, uy, uz, vx, vy, vz, dt, _dx_2, _dy_2, _dz_2, alpha, etax, etay, etaz)\n\nComputes the update rule for the velocity of the vector field through the equation:\n\nvecv^j+frac12 = vecv^j-frac12 + dt*alphaleft(vecrright) nabla left(vecetaleft(vecrright) cdot vecu^j right)\n\nand discretized in the following way:\n\nv_x^j+frac12 leftixiyizright = v_x^j-frac12leftixiyizright + dt*alphaleftixiyizright left( left(eta_xleftix+1iyizright  u_x^jleftix+1iyizright -  eta_xleftix-1iyizright  u_x^jleftix-1iyizrightright) + left(eta_yleftix+1iyizright  u_y^jleftix+1iyizright -  eta_yleftix-1iyizright  u_y^jleftix-1iyizrightright) + left(eta_zleftix+1iyizright  u_z^jleftix+1iyizright -  eta_zleftix-1iyizright  u_z^jleftix-1iyizrightright)right)dx2\n\nv_y^j+frac12 leftixiyizright = v_y^j-frac12leftixiyizright + dt*alphaleftixiyizright left( left(eta_xleftixiy+1izright  u_x^jleftixiy+1izright -  eta_xleftixiy-1izright  u_x^jleftixiy-1izrightright) + left(eta_yleftixiy+1izright  u_y^jleftixiy+1izright -  eta_yleftixiy-1izright  u_y^jleftixiy-1izrightright) + left(eta_zleftixiy+1izright  u_z^jleftixiy+1izright -  eta_zleftixiy-1izright  u_z^jleftixiy-1izrightright)right)dy2\n\nv_z^j+frac12 leftixiyizright = v_z^j-frac12leftixiyizright + dt*alphaleftixiyizright left( left(eta_xleftixiyiz+1right  u_x^jleftixiyiz+1right -  eta_xleftixiyiz-1right  u_x^jleftixiyiz-1rightright) + left(eta_yleftixiyiz+1right  u_y^jleftixiyiz+1right -  eta_yleftixiyiz-1right  u_y^jleftixiyiz-1rightright) + left(eta_zleftixiyiz+1right  u_z^jleftixiyiz+1right -  eta_zleftixiyiz-1right  u_z^jleftixiyiz-1rightright)right)dz2\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.update_vecu_abs_yz_left!","page":"Wave 3D","title":"MaxwellWave.Wave3D.update_vecu_abs_yz_left!","text":"@parallel_indices (ix, iy, iz) function update_vecu_abs_yz_left!(ux, uy, uz, vx, vy, vz, dt)\n\nComputes the update rule for the vector field through the equation:\n\nvecu^j+1 = vecu^j + dt*vecv^j+frac12\n\nBut the yz-plain at x=0 is a absorbing plaine. Important to call the kernel with size(u)-2 in y,z, but with size(u)-1 in x This kernel is only allowed to be called from the ranks located at this domain boundary\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.compute_vecv_abs_yz_left!","page":"Wave 3D","title":"MaxwellWave.Wave3D.compute_vecv_abs_yz_left!","text":"@parallel_indices (iy, iz) function update_vecv_abs_yz_left!(ux, uy, uz, vx, vy, vz, c)\n\nComputes the update rule for the vector field through the equation:\n\nfracpartialpartial tvecEleft(vecrtright) + c left(vecn cdot nabla right)vecEleft(vecrtright)\n\nThe yz-plain at x=0 is a absorbing plaine. Important to call the kernel with size(u)-2 in y,z This kernel is only allowed to be called from the ranks located at this domain boundary\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.compute_vecv_abs_yz_right!","page":"Wave 3D","title":"MaxwellWave.Wave3D.compute_vecv_abs_yz_right!","text":"@parallel_indices (iy, iz) function compute_vecv_abs_yz_right!(ux, uy, uz, vx, vy, vz, c, _dx)\n\nComputes the update rule for the vector field through the equation:\n\nfracpartialpartial tvecEleft(vecrtright) + c left(vecn cdot nabla right)vecEleft(vecrtright)\n\nThe yz-plain at x=end is a absorbing plaine. Important to call the kernel with size(u)-2 in y,z This kernel is only allowed to be called from the ranks located at this domain boundary\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.compute_vecv_abs_xz_left!","page":"Wave 3D","title":"MaxwellWave.Wave3D.compute_vecv_abs_xz_left!","text":"@parallel_indices (ix, iz) function update_vecv_abs_xz_left!(ux, uy, uz, vx, vy, vz, c)\n\nComputes the update rule for the vector field through the equation:\n\nfracpartialpartial tvecEleft(vecrtright) + c left(vecn cdot nabla right)vecEleft(vecrtright)\n\nThe xz-plain at y=0 is a absorbing plaine. Important to call the kernel with size(u)-2 in x,z This kernel is only allowed to be called from the ranks located at this domain boundary\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.compute_vecv_abs_xz_right!","page":"Wave 3D","title":"MaxwellWave.Wave3D.compute_vecv_abs_xz_right!","text":"@parallel_indices (ix, iz) function compute_vecv_abs_xz_right!(ux, uy, uz, vx, vy, vz, c, _dx)\n\nComputes the update rule for the vector field through the equation:\n\nfracpartialpartial tvecEleft(vecrtright) + c left(vecn cdot nabla right)vecEleft(vecrtright)\n\nThe xz-plain at y=end is a absorbing plaine. Important to call the kernel with size(u)-2 in x,z This kernel is only allowed to be called from the ranks located at this domain boundary\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.compute_vecv_abs_xy_left!","page":"Wave 3D","title":"MaxwellWave.Wave3D.compute_vecv_abs_xy_left!","text":"@parallel_indices (ix, iy) function compute_vecv_abs_xy_left!(ux, uy, uz, vx, vy, vz, c, _dx)\n\nComputes the update rule for the vector field through the equation:\n\nfracpartialpartial tvecEleft(vecrtright) + c left(vecn cdot nabla right)vecEleft(vecrtright)\n\nThe xy-plain at yzl the kernel with size(u)-2 in x,y This kernel is only allowed to be called from the ranks located at this domain boundary\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.compute_vecv_abs_xy_right!","page":"Wave 3D","title":"MaxwellWave.Wave3D.compute_vecv_abs_xy_right!","text":"@parallel_indices (ix, iy) function compute_vecv_abs_xy_right!(ux, uy, uz, vx, vy, vz, c, _dx)\n\nComputes the update rule for the vector field through the equation:\n\nfracpartialpartial tvecEleft(vecrtright) + c left(vecn cdot nabla right)vecEleft(vecrtright)\n\nThe xy-plain at z=end is a absorbing plaine. Important to call the kernel with size(u)-2 in x,y This kernel is only allowed to be called from the ranks located at this domain boundary\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html#MaxwellWave.Wave3D.update_vecu_abs!","page":"Wave 3D","title":"MaxwellWave.Wave3D.update_vecu_abs!","text":"@parallel_indices (ix, iy, iz) function update_vecu_abs(ux, uy, uz, vx, vy, vz, dt, neighbors_x, neighbors_y, neighbors_z, abs_x, abs_y, abs_z)\n\nComputes the update rule for the vector field through the equation:\n\nvecu^j+1 = vecu^j + dt*vecv^j+frac12\n\nMore general kernel, where depending on arguments it is decided if boundary is absorbing. neighborsi gives the information if rank lies on left/right boundary and absi if this boundary is absorbing.\n\n\n\n\n\n","category":"function"},{"location":"wave3D.html","page":"Wave 3D","title":"Wave 3D","text":"","category":"page"},{"location":"index.html#Introduction-to-MaxwellWave","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Pages = [\n    \"index.md\",\n    \"wave2D.md\",\n    \"wave3D.md\",\n    \"wave3DnonlinearChi3.md\",\n    \"auxiliary.md\",\n]","category":"page"},{"location":"index.html#Maxwell-Wave","page":"Introduction to MaxwellWave","title":"Maxwell Wave","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"(Image: Build Status)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"The goal of this project is to solve the electromagnetic wave equation in 3D.","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"The documentation is hosted under MaxwellWave","category":"page"},{"location":"index.html#Authors","page":"Introduction to MaxwellWave","title":"Authors","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Lothar Heimbach, Master's Student in Computational Science and Engineering at ETH Zurich\nAlexander Maeder, Master's Student in Electrical Engineering and Information Technology at ETH Zurich","category":"page"},{"location":"index.html#Derivation-Partial-Differentaial-Equation","page":"Introduction to MaxwellWave","title":"Derivation Partial Differentaial Equation","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"For the derivation, we start with the general Maxwell's equation:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot vecDleft(vecrtright) = p_0left(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times vecEleft(vecrtright) = - fracpartialpartial tvecBleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times vecHleft(vecrtright) = fracpartialpartial t vecDleft(vecrtright) + vecj_0left(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot vecBleft(vecrtright) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We have to further supplement this system of equations with constitutive relations.","category":"page"},{"location":"index.html#Linear-Lossy-Problem","page":"Introduction to MaxwellWave","title":"Linear Lossy Problem","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We choose for the first problem setting a nonmagnetic dielectric with no free charges and no nonlinearities:<br />","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"p_0left(vecrtright) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecj_0left(vecrtright) = sigmaleft(vecrtright) vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecDleft(vecrtright) = varepsilon_0 varepsilon_rleft(vecrright) vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecBleft(vecrtright) = mu_0 vecHleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We then insert these constitutive relations in the maxwell equations and arrive at the system:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot left( varepsilon_0 varepsilon_rleft(vecrright) vecEleft(vecrtright) right) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times vecEleft(vecrtright) = - mu_0 fracpartialpartial tvecHleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times vecHleft(vecrtright) = varepsilon_0 varepsilon_rleft(vecrright) fracpartialpartial t vecEleft(vecrtright) + sigmaleft(vecrtright) vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot vecHleft(vecrtright) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"To further simplify the system, we apply multiple transformations and vector calculus identities:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times nabla times vecEleft(vecrtright) = - mu_0 fracpartialpartial t nabla times vecHleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times nabla times vecEleft(vecrtright) = - mu_0 varepsilon_0 varepsilon_rleft(vecrright) fracpartial^2partial t^2vecEleft(vecrtright) -mu_0 left(fracpartialpartial tsigmaleft(vecrtright)right)vecEleft(vecrtright) -mu_0sigmaleft(vecrtright) left(fracpartialpartial tvecEleft(vecrtright)right)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times nabla times vecEleft(vecrtright) = nabla left(nabla cdot vecEleft(vecrtright)right) - nabla^2 vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"0 = nabla cdot left(varepsilon_rleft(vecrright) vecEleft(vecrtright) right) = varepsilon_rleft(vecrright) nabla cdot vecEleft(vecrtright) + nabla varepsilon_rleft(vecrright) cdot vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot vecEleft(vecrtright) = -fracnabla varepsilon_rleft(vecrright) cdot vecEleft(vecrtright)varepsilon_rleft(vecrright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times nabla times vecEleft(vecrtright) = -nabla left(fracnabla varepsilon_rleft(vecrright) cdot vecEleft(vecrtright)varepsilon_rleft(vecrright) right) - nabla^2 vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"With all of these simplifications, we arrive at the final equation for the electric field, which we want to solve: ","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla^2 vecEleft(vecrtright) + nabla left(fracnabla varepsilon_rleft(vecrright) cdot vecEleft(vecrtright)varepsilon_rleft(vecrright) right) - mu_0 varepsilon_0 varepsilon_rleft(vecrright) fracpartial^2partial t^2vecEleft(vecrtright) -mu_0 left(fracpartialpartial tsigmaleft(vecrtright)right)vecEleft(vecrtright) -mu_0sigmaleft(vecrtright) left(fracpartialpartial tvecEleft(vecrtright)right) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Which can be equivalently formulated as: ","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"fracpartialpartial tbeginbmatrix\n        veculeft(vecrtright)\n        vecvleft(vecrtright)\n    endbmatrix \n    = beginbmatrix\n        0  1\n        -fracfracpartialpartial tsigmaleft(vecrtright)varepsilon_0 varepsilon_rleft(vecrright)  -fracsigmaleft(vecrtright)varepsilon_0 varepsilon_rleft(vecrright) \n    endbmatrix\n    beginbmatrix\n        veculeft(vecrtright)\n        vecvleft(vecrtright)\n    endbmatrix + \n    beginbmatrix\n        0\n        frac1mu_0 varepsilon_0 varepsilon_rleft(vecrright)nabla^2 veculeft(vecrtright) + frac1mu_0 varepsilon_0 varepsilon_rleft(vecrright) nabla left(fracnabla varepsilon_rleft(vecrright) cdot veculeft(vecrtright)varepsilon_rleft(vecrright) right)\n    endbmatrix","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"veculeft(vecrtright) = vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecvleft(vecrtright) = fracpartialpartial t vecEleft(vecrtright)","category":"page"},{"location":"index.html#\\chi3-Nonlinear-Lossy-Problem","page":"Introduction to MaxwellWave","title":"chi^3 Nonlinear Lossy Problem","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We choose for the second problem a more general setting such that third harmonic effects can be captured by the simulation. We assume the following constitutive relations:<br />","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"p_0left(vecrtright) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecj_0left(vecrtright) = sigmaleft(vecrtright) vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecDleft(vecrtright) = varepsilon_0 varepsilon_rleft(vecrright) vecEleft(vecrtright) + varepsilon_0 chi^3left(vecrright)leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecBleft(vecrtright) = mu_0 vecHleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We then insert these constitutive relations in the maxwell equations and arrive at the system:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot left( varepsilon_0 varepsilon_rleft(vecrright) vecEleft(vecrtright) + varepsilon_0 chi^3left(vecrright)leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright) right) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times vecEleft(vecrtright) = - mu_0 fracpartialpartial tvecHleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times vecHleft(vecrtright) = varepsilon_0 varepsilon_rleft(vecrright) fracpartialpartial t vecEleft(vecrtright) + varepsilon_0 chi^3left(vecrright) fracpartialpartial t left( leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright)right) + sigmaleft(vecrtright) vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot vecHleft(vecrtright) = 0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We have to simplify to get a solvable form:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times nabla times vecEleft(vecrtright) = - mu_0 varepsilon_0 varepsilon_rleft(vecrright) fracpartial^2partial t^2 vecEleft(vecrtright) - mu_0 varepsilon_0 chi^3left(vecrright) fracpartial^2partial t^2 left( leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright)right) - mu_0 fracpartial sigmaleft(vecrtright)partial t vecEleft(vecrtright)- mu_0 fracpartial vecEleft(vecrtright)partial tsigmaleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla times nabla times vecEleft(vecrtright) = nabla left(nabla cdot vecEleft(vecrtright)right) - nabla^2 vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla cdot vecEleft(vecrtright) = - fracnabla varepsilon_rleft(vecrright) cdot vecEleft(vecrtright)varepsilon_rleft(vecrright) - frac1varepsilon left(vecrright) nabla cdot left(chi^3left(vecrright)leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright) right)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"nabla left(nabla cdot vecEleft(vecrtright)right) - nabla^2 vecEleft(vecrtright) = - nabla^2 vecEleft(vecrtright) + nabla left( - fracnabla varepsilon_rleft(vecrright) cdot vecEleft(vecrtright)varepsilon_rleft(vecrright) - frac1varepsilon left(vecrright) nabla cdot left(chi^3left(vecrright)leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright) right) right)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"fracpartial^2partial t^2 left( leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright)right) = fracpartialpartial t left( leftlvert vecEleft(vecrtright)rightrvert^2 fracpartialpartial t vecEleft(vecrtright) + 2 left(sum fracpartialpartial t leftlvert E_i left(vecrtright) rightrvert right)vecEleft(vecrtright)right)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"fracpartial^2partial t^2 left( leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright)right) = leftlvert vecEleft(vecrtright)rightrvert^2 fracpartial^2partial t^2 vecEleft(vecrtright) + 4 left(sum fracpartialpartial t leftlvert E_i left(vecrtright) rightrvert right) fracpartialpartial tvecEleft(vecrtright) + 2left(sum fracpartial^2partial t^2 leftlvert E_i left(vecrtright) rightrvert right)vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Through the addition of the nonlinear term, we get a nasty term that makes it impossible to write the equation system in a clean matrix form as there is a sum over second-order time derivatives. We introduce an approximation to mitigate this problem. We assume that the absolute square of the electric field is a slowly varying function of time:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"fracpartial^2partial t^2 left( leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright)right) approx leftlvert vecEleft(vecrtright)rightrvert^2 fracpartial^2partial t^2 vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Then we can plug everything into one equation:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"- nabla^2 vecEleft(vecrtright) + nabla left( - fracnabla varepsilon_rleft(vecrright) cdot vecEleft(vecrtright)varepsilon_rleft(vecrright) - frac1varepsilon left(vecrright) nabla cdot left(chi^3left(vecrright)leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright) right) right) = - mu_0 varepsilon_0 varepsilon_rleft(vecrright) fracpartial^2partial t^2 vecEleft(vecrtright) - mu_0 varepsilon_0 chi^3left(vecrright) leftlvert vecEleft(vecrtright)rightrvert^2 fracpartial^2partial t^2 vecEleft(vecrtright) - mu_0 fracpartial sigmaleft(vecrtright)partial t vecEleft(vecrtright)- mu_0 fracpartial vecEleft(vecrtright)partial tsigmaleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"As in the previous linear problem, we can write a system of equations:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"fracpartialpartial tbeginbmatrix\n        veculeft(vecrtright)\n        vecvleft(vecrtright)\n    endbmatrix \n    = beginbmatrix\n        0  1\n        -fracfracpartialpartial tsigmaleft(vecrtright)varepsilon_0 varepsilon_rleft(vecrright) + varepsilon_0 chi^3left(vecrright) leftlvert vecEleft(vecrtright)rightrvert^2  -fracsigmaleft(vecrtright)varepsilon_0 varepsilon_rleft(vecrright) + varepsilon_0 chi^3left(vecrright) leftlvert vecEleft(vecrtright)rightrvert^2 \n    endbmatrix\n    beginbmatrix\n        veculeft(vecrtright)\n        vecvleft(vecrtright)\n    endbmatrix + \n    beginbmatrix\n        0\n        frac1mu_0 varepsilon_0 varepsilon_rleft(vecrright) + mu_0varepsilon_0 chi^3left(vecrright) leftlvert vecEleft(vecrtright)rightrvert^2nabla^2 veculeft(vecrtright) + frac1mu_0 varepsilon_0 varepsilon_rleft(vecrright) + mu_0varepsilon_0 chi^3left(vecrright) leftlvert vecEleft(vecrtright)rightrvert^2 nabla left(fracnabla varepsilon_rleft(vecrright) cdot veculeft(vecrtright)varepsilon_rleft(vecrright) right) + frac1mu_0 varepsilon_0 varepsilon_rleft(vecrright) + mu_0varepsilon_0 chi^3left(vecrright) leftlvert vecEleft(vecrtright)rightrvert^2 nabla left(frac1varepsilon left(vecrright) nabla cdot left(chi^3left(vecrright)leftlvert vecEleft(vecrtright)rightrvert^2 vecEleft(vecrtright) right) right)\n    endbmatrix","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"veculeft(vecrtright) = vecEleft(vecrtright)","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecvleft(vecrtright) = fracpartialpartial t vecEleft(vecrtright)","category":"page"},{"location":"index.html#Boundary-Condition","page":"Introduction to MaxwellWave","title":"Boundary Condition","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"In this project, we use various types of boundary conditions for modeling different physical systems:","category":"page"},{"location":"index.html#Perfect-Electric-Conductor-Boundary-Conditions","page":"Introduction to MaxwellWave","title":"Perfect Electric Conductor Boundary Conditions","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"This boundary condition model a perfect metallic mirror. The whole field is reflected at the boundary and no field is allowed to exist inside the mirror. The perfect electric conductor is represented through the Dirichlet boundary condition:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecEleft(vecrtright) = 0  vecr in partial Omega_PEC","category":"page"},{"location":"index.html#Perfect-Absorbing-Boundary-Conditions","page":"Introduction to MaxwellWave","title":"Perfect Absorbing Boundary Conditions","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Perfect absorbing boundary conditions should model infinite free space propagation of the field without reflections.","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"A first naive idea is to use again the perfect electric conductor boundary conditions, but introduce a highly absorbing conductivity layer at the boundary.","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Another choice for the perfect absorbing boundary conditions is the zeroth order approximation. This choice is represented through the following mixed boundary condition:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"fracpartialpartial tvecEleft(vecrtright) + c left(vecn cdot nabla right)vecEleft(vecrtright)  vecr in partial Omega_PA0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Where c is the speed of light in the boundary medium and vecn is the outwards pointing boundary normal vector. This condition can be rewritten in the following way:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"vecvleft(vecrtright) = - c left(vecn cdot nabla right)veculeft(vecrtright)  vecr in partial Omega_PA0","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Therefore, the velocity can be directly calculated on the boundary and is not undefined anymore as before. In addition, we need the value of veculeft(vecrtright) on the boundary. This field we get through applying the update rule not only on the inside of the domain but on the absorbing boundary.","category":"page"},{"location":"index.html#Results","page":"Introduction to MaxwellWave","title":"Results","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"In the following chapter, we present plots and gifs resulting from running different physics examples. All of the 2D codes were run on four GPUs, whereas the 3D ones were on eight GPUs:","category":"page"},{"location":"index.html#Homogenous-2D-Problem","page":"Introduction to MaxwellWave","title":"Homogenous 2D Problem","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"In the first example, we simulate the 2D homogenous wave equation in a vacuum. The reflecting boundary condition is chosen. The field is initialized with a cosine-modulated gaussian pulse.  ","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"(Image: )","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We plot only the z-component because there is no coupling between different polarizations in a vacuum. ","category":"page"},{"location":"index.html#Homogenous-3D-Problem","page":"Introduction to MaxwellWave","title":"Homogenous 3D Problem","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"As a second example, we simulate the full equation derived in the linear lossy problem section with reflecting boundary conditions. We chose a static conductivity and both permeability/conductivity are plotted below:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"(Image: ) (Image: )","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"As the initial condition, we chose a y-polarized pulse. It has the shape of a  hyperbolic secant in the x-direction and a gaussian in the y/z-direction. This pulse is set to propagate in the positive x-direction: (Image: ) (Image: )","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"In the following plots, we present the time evolution of the vector field. We omit to plot the z-component because it is vanishing with the chosen material parameters: (Image: ) (Image: ) We can see that there is a coupling from linear y-polarized field to x/y-elliptic polarized with a gaussian shaped dielectric waveguide.","category":"page"},{"location":"index.html#Absorbing-3D-Problem","page":"Introduction to MaxwellWave","title":"Absorbing 3D Problem","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"As in the previous example, we simulate the equation of the linear lossy problem section. In contrast, we changed the boundary condition and the material parameters. We applied on the left y/z-plane a first-order perfect absorbing boundary condition. ","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"(Image: ) (Image: )","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"The initial conditions are not changed: (Image: ) (Image: )","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"As in the previous example, we plot only the x/y-component: (Image: ) (Image: ) Since we simulate for a longer period of time, we can see that the field is fully absorbed in the left plane. This is due to the fact that first-order absorbing boundary conditions are perfect if the wavevector is perpendicular to the surface.","category":"page"},{"location":"index.html#Nonlinear-3D-Problem","page":"Introduction to MaxwellWave","title":"Nonlinear 3D Problem","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We simulate the derived system of equation in the chi^3 nonlinear lossy problem section with only perfect reflecting boundary conditions. ","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"The material parameters are not changed, but a chi^3 is defined. We chose that only nonlinear effects happen in the center of the domain: (Image: ) (Image: ) (Image: )","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"The initial conditions are again not changed: (Image: ) (Image: )","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"We omit again the z-component, since even with nonlinear effect the coupling to the z-component is small.  (Image: ) (Image: ) The effect of nonlinearity is difficult to see. We would need to calculate the instantaneous frequency, because new frequencies are generated and the pulse gets chirped.","category":"page"},{"location":"index.html#Conclusion-and-Possible-Extensions","page":"Introduction to MaxwellWave","title":"Conclusion and Possible Extensions","text":"","category":"section"},{"location":"index.html#Conclusion","page":"Introduction to MaxwellWave","title":"Conclusion","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"In the previous section, we presented multiple simulations of Maxwell's equation with different assumptions on the constitutive relations, boundary conditions, and material parameters. There we demonstrated scalability on many GPUs/CPUs to compute large-scale electromagnetism problems with high accuracy. Now different time domain problems such as nonlinear pulse formation or transmission characteristics of photonic components over a large bandwidth can be investigated. ","category":"page"},{"location":"index.html#Possible-Extensions","page":"Introduction to MaxwellWave","title":"Possible Extensions","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"For the above-mentioned problems, we would need to change the material parameters and depending on the problem chose different boundary conditions. In addition, to get transmission characteristics we would have to implement a port boundary condition. Where a high bandwidth pulse can be directly inserted at the boundary and every reflection is absorbed. Then we would need to Fourier transform the inserted/transmitted/reflected signals to get transmission characteristics in the frequency domain with a single simulation. ","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"On the technical side, we could implement low-level optimization for the GPU kernel such as the use of shared memory. For such optimizations, we should first investigate the performance metric of our implemented kernels, which is a missing feature due to time constraints.  In addition, for the absorbing boundary condition we could implement a more general kernel c, which applies depending on function arguments the boundary condition.","category":"page"},{"location":"index.html#Running-the-Project-Examples","page":"Introduction to MaxwellWave","title":"Running the Project Examples","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"One has to instantiate the Julia project first before running any script:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"julia --project -e 'using Pkg; Pkg.instantiate()'","category":"page"},{"location":"index.html#Local-Documentation","page":"Introduction to MaxwellWave","title":"Local Documentation","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"One has to run the following commands to create documentation locally:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"cd docs/\njulia --project make.jl","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"It will create a build folder with the documentation inside as described in Documenter Guide.","category":"page"},{"location":"index.html#Testing-Locally","page":"Introduction to MaxwellWave","title":"Testing Locally","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"The following commands will precompile the project, check dependencies and run the tests according to Unit Test:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"julia --project -e 'using Pkg; Pkg.test()'","category":"page"},{"location":"index.html#Running-Locally","page":"Introduction to MaxwellWave","title":"Running Locally","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"As most of the scripts use MPI, one has to configure the right MPI binary with MPIPreferences. For example, if one wants to use the system MPI binary:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"julia --project -e 'using MPIPreferences; MPIPreferences.use_system_binary()'","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Afterward, the example can be run in the following way:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"mpiexec -n X julia --project examples/homogeneous_dirichlet_Ez_2D.jl\nmpiexec -n X julia --project examples/homogeneous_dirichlet_vecE_3D.jl\nmpiexec -n X julia --project examples/absorbing_boundary_vecE_3D.jl\nmpiexec -n X julia --project examples/nonlinear_vecE_3D.jl","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Where X is the number of ranks to run. The flag USE_GPU inside the scripts has to be set to choose between running on CPU or GPU. ","category":"page"},{"location":"index.html#Running-on-Piz-Daint","page":"Introduction to MaxwellWave","title":"Running on Piz Daint","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Inside the example folder, there are bash scripts for the different examples to run on Pz Daint:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"sbatch examples/homogeneous_dirichlet_Ez_2D.sh\nsbatch examples/homogeneous_dirichlet_vecE_3D.sh\nsbatch examples/absorbing_boundary_vecE_3D.sh\nsbatch examples/nonlinear_vecE_3D.sh","category":"page"},{"location":"index.html#Visualization","page":"Introduction to MaxwellWave","title":"Visualization","text":"","category":"section"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"The following scripts have to be executed after running the simulations to create the presented plots in the result section:","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"julia --project examples/homogeneous_dirichlet_Ez_2D_viz.jl","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"julia --project examples/vecE_3D_viz.jl","category":"page"},{"location":"index.html","page":"Introduction to MaxwellWave","title":"Introduction to MaxwellWave","text":"Where in the \"vecE3Dviz.jl\" multiple settings have to be changed depending on \"homogeneousdirichletvecE3D\"/\"absorbingboundaryvecE3D\"/\"nonlinearvecE3D\". The settings \"examplename\" \"dims\", \"epsilon\", \"sigma\", \"chi3\", \"upulseshape\", and \"vpulse_shape\" should match the simulation. ","category":"page"}]
}
